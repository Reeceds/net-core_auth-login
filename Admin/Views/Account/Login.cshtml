@model LoginVM

@{
    ViewData["Title"] = "Login";
}

<h1 class="mb-4">Login</h1>

<form class="col-md-7 col-lg-5 col-12" asp-action="Login" method="post">
    <div class="mb-3">
        @* 'ModelOnly' refers to the validation set within LoginVM.cs *@
        <div asp-validation-summary="ModelOnly" class="text-danger"></div> 
        <label asp-for="Username" class="mb-2"></label>
        <input class="form-control" asp-for="Username">
        <span asp-validation-for="Username" class="text-danger"></span>
    </div>
    <div class="mb-3">
        <div asp-validation-summary="ModelOnly"></div> 
        <label asp-for="Password" class="mb-2"></label>
        <input class="form-control" asp-for="Password">
        <span asp-validation-for="Password" class="text-danger"></span>
    </div>
    <div class="mb-3 form-check">
        <label class="form-check-label">
            @* '@HtmlDisplayNameFor() refers to [Display] set in LoginVm.cs' *@
            <input asp-for="RememberMe" class="form-check-input" /> @Html.DisplayNameFor(a => a.RememberMe)
        </label>
    </div>
    <div class="mb-3">
        <a asp-action="Register" class="text-decoration-none">Don't have an account?'</a>
    </div>
    <div class="d-flex flex-row justify-content-between">
        <a class="btn btn-danger" asp-controller="Home" asp-action="Index">Cancel</a>
        <button type="submit" class="btn btn-success">Login</button>
    </div>
</form>

@* Enables '@await RenderSectionAsync()' which is set at the bottom of '_Layout.cshtml'. This allows you to access '_ValidationScriptsPartial.cshtml' file which calls JS scripts that dynamically adds/removes validation text on the form when interacting with the input fields. Basically like linking an external JS script file at the bottom of a html file.  *@
@section Scripts{
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}